precision = (confusion.matrix[1,1]/(confusion.matrix[1,1]+confusion.matrix[2,1]))
#    precisions[k] = precision
print(confusion.matrix)
recall =(confusion.matrix[1,1]/(confusion.matrix[1,1]+confusion.matrix[1,2]))
#    recalls[k] = recall
fscore = 2*precision*recall/(precision+recall)
#    fscores[k] = fscore
probs = c(probs,prob)
actuals = c(actuals,actual)
## you may compute other measures and store them in arrays
#  }
avg.error = error
cat('avg error=',avg.error,'\n')
avg.accuracy = 1 - avg.error
cat('avg Accuracy=',avg.accuracy,'\n')
avg.precision = precision
cat('avg Precision=',avg.precision,'\n')
avg.recall = recall
cat('avg recall=',avg.recall,'\n')
avg.fscore = fscore
cat('avg fscore=',avg.fscore,'\n')
}
results <- cbind(my.classifier(training,testing, cl.name='lr',do.cv=T),
my.classifier(training,testing, cl.name='knn1',do.cv=T),
my.classifier(training,testing, cl.name='knn5',do.cv=T),
my.classifier(training,testing, cl.name='knn10',do.cv=T),
my.classifier(training,testing, cl.name='nb',do.cv=T),
#my.classifier(training,testing, cl.name='dtree',do.cv=T),
#my.classifier(training,testing, cl.name='dtreeprune',do.cv=T),
#my.classifier(training,testing, cl.name='svm1',do.cv=T),
#my.classifier(training,testing, cl.name='svm2',do.cv=T),
my.classifier(training,testing, cl.name='ada',do.cv=T)
)
results <- cbind(my.classifier(training,testing, cl.name='lr',do.cv=T),
my.classifier(training,testing, cl.name='knn1',do.cv=T),
my.classifier(training,testing, cl.name='knn5',do.cv=T),
my.classifier(training,testing, cl.name='knn10',do.cv=T),
my.classifier(training,testing, cl.name='nb',do.cv=T),
#my.classifier(training,testing, cl.name='dtree',do.cv=T),
#my.classifier(training,testing, cl.name='dtreeprune',do.cv=T),
#my.classifier(training,testing, cl.name='svm1',do.cv=T),
#my.classifier(training,testing, cl.name='svm2',do.cv=T),
#my.classifier(training,testing, cl.name='ada',do.cv=T)
)
results <- cbind(my.classifier(training,testing, cl.name='lr',do.cv=T),
my.classifier(training,testing, cl.name='knn1',do.cv=T),
my.classifier(training,testing, cl.name='knn5',do.cv=T),
my.classifier(training,testing, cl.name='knn10',do.cv=T),
my.classifier(training,testing, cl.name='nb',do.cv=T)
#my.classifier(training,testing, cl.name='dtree',do.cv=T),
#my.classifier(training,testing, cl.name='dtreeprune',do.cv=T),
#my.classifier(training,testing, cl.name='svm1',do.cv=T),
#my.classifier(training,testing, cl.name='svm2',do.cv=T),
#my.classifier(training,testing, cl.name='ada',do.cv=T)
)
colnames(results) <- c("Logistic","KNN1","KNN5","KNN10","Naive Bayes")
str(final_total.2)
final_total.2 <- final_total.2[,-c(6,9)]
training <- final_total.2[which(final_total.2$StartDay < 20),]
testing <- final_total.2[-which(final_total.2$StartDay < 20),]
training.knn <- training
testing.knn <- testing
for (i in 2:7)
training.knn[,i] = (training.knn[,i]-min(training.knn[,i]))/(max(training.knn[,i])-min(training.knn[,i]))
training.knn[1:3,]
for (i in 2:7)
testing.knn[,i] = (testing.knn[,i]-min(testing.knn[,i]))/(max(testing.knn[,i])-min(testing.knn[,i]))
testing.knn[1:3,]
View(final_total.2)
library(randomForest)
library(plyr)
rf <- randomForest(training$y ~ ., data = training, ntree = 100, importance = TRUE)
summary(rf)
importance(rf)
plot(importance(rf))
pred.rf <- predict(rf, testing)
head(pred.rf)
which(pred.rf>1)
head(which(pred.rf>1))
which(pred.rf<1)
head(pred.rf)
class(pred.rf)
View(testing)
pred.rf[,1]
pred.rf[1]
pred.rf>1
y1 <- testing$y
attach(clusterSim)
library(clusterSim)
data.Normalization (y1,type="n5",normalization="column")
head(y1)
y1 <- data.Normalization (y1,type="n5",normalization="column")
head(y1)
head(pred.rf)
for (i in 1:7)
testing.knn[,i] = (testing.knn[,i]-min(testing.knn[,i]))/(max(testing.knn[,i])-min(testing.knn[,i]))
testing.knn[1:3,]
rf.scale <- randomForest(training.knn$y ~., data = training.knn, ntree = 100, importance = TRUE)
View(final_total.2)
str(final_total.2)
final_total.2 <- final_total.2[,-c(6,9)]
# final_total.2$y <- as.factor(final_total.2$y)
training <- final_total.2[which(final_total.2$StartDay < 20),]
testing <- final_total.2[-which(final_total.2$StartDay < 20),]
# centering with 'scale()'
training.scale <- training
testing.scale <- testing
center_scale <- function(x) {
scale(x, scale = FALSE)
}
training.scale <- center_scale(training.scale)
testing.scale <- center_scale(testing.scale)
View(testing.scale)
library(glmnet)
g4=sample(1:7,99973,replace=TRUE)
fit3=glmnet(training.scale,g4,family="multinomial")
predicted <- predict(fit3,testing.scale,type="response",s=0.01)
library(Metrics)
mapk <- function (k, actual, predicted)
{
if( length(actual)==0 || length(predicted)==0 )
{
return(0.0)
}
scores <- rep(0, length(actual))
for (i in 1:length(scores))
{
scores[i] <- apk(k, actual[[i]], predicted[[i]])
}
score <- mean(scores)
score
}
actual <- testing.scale$y
mapk(55554,actual, predicted)
training.scale <- matrix(training.scale, ncol = 7)
testing.scale <- matrix(testing.scale, ncol = 7)
library(glmnet)
g4=sample(1:7,99973,replace=TRUE)
fit3=glmnet(training.scale,g4,family="multinomial")
predicted <- predict(fit3,testing.scale,type="response",s=0.01)
library(Metrics)
mapk <- function (k, actual, predicted)
{
if( length(actual)==0 || length(predicted)==0 )
{
return(0.0)
}
scores <- rep(0, length(actual))
for (i in 1:length(scores))
{
scores[i] <- apk(k, actual[[i]], predicted[[i]])
}
score <- mean(scores)
score
}
actual <- testing.scale$y
mapk(55554,actual, predicted)
testing.scale
testing.scale$y
testing.scale <- matrix(testing.scale, ncol = 7)
class(testing.scale)
testing.scale$y
library(glmnet)
g4=sample(1:7,99973,replace=TRUE)
fit3=glmnet(training,g4,family="multinomial")
predicted <- predict(fit3,testing,type="response",s=0.01)
library(Metrics)
mapk <- function (k, actual, predicted)
{
if( length(actual)==0 || length(predicted)==0 )
{
return(0.0)
}
scores <- rep(0, length(actual))
for (i in 1:length(scores))
{
scores[i] <- apk(k, actual[[i]], predicted[[i]])
}
score <- mean(scores)
score
}
actual <- testing$y
mapk(55554,actual, predicted)
predicted
head(predicted)
fit3=glmnet(training[,2:7],training[,1],family="multinomial")
training[,2:7]
head(training[,1])
fit3=glmnet(training[,2:7],training[,1],family="multinomial")
training[1]
head(training[1])
fit3=glmnet(training[2:7],training[1],family="multinomial")
class(training[1])
fit1 <- lm.ridge(y ~ ., data = training, lambda = seq(0.001, .05, .001))
new.df <- data.frame(training)
predict(fit1, new.df)
library(caret)
library(elasticnet)
library(MASS)
fit1 <- lm.ridge(y ~ ., data = training, lambda = seq(0.001, .05, .001))
new.df <- data.frame(training)
predict(fit1, new.df)
head(new.df)
fit1 <- lm.ridge(y ~ ., data = training, lambda = 0.1)
new.df <- data.frame(training)
predict(fit1, new.df)
fit1
class(fit1)
library(caret)
glm.fit = glm(y~., family = multinomial, data = training)
glm.pred = predict.glm(glm.fit, type = "response")
head(glm.pred)
rnorm(100)
g4=sample(1:4,100,replace=TRUE)
g4
class(g4)
class(rnorm(4))
y <- training[1]
class(y)
y <- as.numeric(training[1])
g4
class(g4)
y <- as.integer(training[1])
y <- as.vector(training[1])
glm.fit = glmnet(x, y, family = "multinomial", data = training)
glm.fit = glmnet(x, y, family = "multinomial")
x <- training[2:7]
glm.fit = glmnet(x, y, family = "multinomial")
class(x)
x <- as.matrix(training[2:7])
glm.fit = glmnet(x, y, family = "multinomial")
y <- as.vector(training[1])
glm.fit = glmnet(x, y, family = "multinomial")
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit1=glmnet(x,y)
print(fit1)
coef(fit1,s=0.01) # extract coefficients at a single value of lambda
predict(fit1,newx=x[1:10,],s=c(0.01,0.005)) # make predictions
class(x)
x
y
class(y)
fit1=glmnet(x,y)
fit1
x <- as.matrix(training[2:7])
y <- as.vector(training[1])
head(x)
y
glm.fit = glmnet(x, y, family = "multinomial")
training <- final_total.2[which(final_total.2$StartDay < 20),]
testing <- final_total.2[-which(final_total.2$StartDay < 20),]
library(stringr) # str_split_fixed()
HealthyRideRentals.2015.Q3 <- read.csv("/Users/zhugejunwei/PittBikeShare/HealthyRideTripData2015Q3/HealthyRideRentals 2015 Q3.csv", stringsAsFactors = FALSE)
HealthyRideRentals.2015.Q4 <- read.csv("/Users/zhugejunwei/PittBikeShare/HealthyRideTripData2015Q4/HealthyRideRentals 2015 Q4.csv", stringsAsFactors = FALSE)
#' ------------------------------------------------
#'                  Preprocessing - 1
#' ------------------------------------------------
# combine two dataframe into one
rental_total <- rbind(HealthyRideRentals.2015.Q3,HealthyRideRentals.2015.Q4)
# delete StationName attributes, only using StationID to do prediction
rental_total <- rental_total[, c(1,2,3,4,5,6,8,10)]
# delete rows with missing values
rental_total$UserType[which(rental_total$UserType == "")] <- NA
rental_total <- rental_total[complete.cases(rental_total), ]
str(rental_total)
rental_total$StartTime <- as.character(rental_total$StartTime)
rental_total$StopTime <- as.character(rental_total$StopTime)
rental_total$UserType <- as.character(rental_total$UserType)
# Split StartTime and StopTime into Day, Month, Year, Hour, and Minute
##' StartTime
tag <- as.data.frame(str_split_fixed(rental_total$StartTime, "/", 3))
rental_total$StartMonth <- tag$V1
rental_total$StartDay <- tag$V2
tag2 <- as.data.frame(str_split_fixed(tag$V3, " ", 2))
rental_total$StartYear <- tag2$V1
tag3 <- as.data.frame(str_split_fixed(tag2$V2, ":", 2))
rental_total$StartHour <- tag3$V1
rental_total$StartMinute <- tag3$V2
rental_total <- rental_total[, - which(colnames(rental_total) == 'StartTime')]
##' StopTime
tag.stop <- as.data.frame(str_split_fixed(rental_total$StopTime, "/", 3))
rental_total$StopMonth <- tag.stop$V1
rental_total$StopDay <- tag.stop$V2
tag.stop2 <- as.data.frame(str_split_fixed(tag.stop$V3, " ", 2))
rental_total$StopYear <- tag.stop2$V1
tag.stop3 <- as.data.frame(str_split_fixed(tag.stop2$V2, ":", 2))
rental_total$StopHour <- tag.stop3$V1
rental_total$StopMinute <- tag.stop3$V2
rental_total <- rental_total[, - which(colnames(rental_total) == 'StopTime')]
# convert training$UserType from factor into numeric
rental_total$UserType <- as.factor(rental_total$UserType)
as.numeric.factor <- function(x) {seq_along(levels(x))[x]}
rental_total$UserType <- as.numeric.factor(rental_total$UserType)
# Split into training and testing set
rental_total$StartDay <- as.numeric(levels(rental_total$StartDay))[rental_total$StartDay]
rental_total$StartMonth <- as.numeric(levels(rental_total$StartMonth))[rental_total$StartMonth]
rental_total$StartYear <- as.numeric(levels(rental_total$StartYear))[rental_total$StartYear]
rental_total$StartHour <- as.numeric(levels(rental_total$StartHour))[rental_total$StartHour]
rental_total$StartMinute <- as.numeric(levels(rental_total$StartMinute))[rental_total$StartMinute]
rental_total$StopDay <- as.numeric(levels(rental_total$StopDay))[rental_total$StopDay]
rental_total$StopMonth <- as.numeric(levels(rental_total$StopMonth))[rental_total$StopMonth]
rental_total$StopYear <- as.numeric(levels(rental_total$StopYear))[rental_total$StopYear]
rental_total$StopHour <- as.numeric(levels(rental_total$StopHour))[rental_total$StopHour]
rental_total$StopMinute <- as.numeric(levels(rental_total$StopMinute))[rental_total$StopMinute]
rental_total <- rbind(HealthyRideRentals.2015.Q3,HealthyRideRentals.2015.Q4)
# delete StationName attributes, only using StationID to do prediction
rental_total <- rental_total[, c(1,2,3,4,5,6,8,10)]
# delete rows with missing values
rental_total$UserType[which(rental_total$UserType == "")] <- NA
rental_total <- rental_total[complete.cases(rental_total), ]
str(rental_total)
rental_total$StartTime <- as.character(rental_total$StartTime)
rental_total$StopTime <- as.character(rental_total$StopTime)
rental_total$UserType <- as.character(rental_total$UserType)
# Split StartTime and StopTime into Day, Month, Year, Hour, and Minute
##' StartTime
tag <- as.data.frame(str_split_fixed(rental_total$StartTime, "/", 3))
rental_total$StartMonth <- tag$V1
rental_total$StartDay <- tag$V2
tag2 <- as.data.frame(str_split_fixed(tag$V3, " ", 2))
rental_total$StartYear <- tag2$V1
tag3 <- as.data.frame(str_split_fixed(tag2$V2, ":", 2))
rental_total$StartHour <- tag3$V1
rental_total$StartMinute <- tag3$V2
rental_total <- rental_total[, - which(colnames(rental_total) == 'StartTime')]
##' StopTime
tag.stop <- as.data.frame(str_split_fixed(rental_total$StopTime, "/", 3))
rental_total$StopMonth <- tag.stop$V1
rental_total$StopDay <- tag.stop$V2
tag.stop2 <- as.data.frame(str_split_fixed(tag.stop$V3, " ", 2))
rental_total$StopYear <- tag.stop2$V1
tag.stop3 <- as.data.frame(str_split_fixed(tag.stop2$V2, ":", 2))
rental_total$StopHour <- tag.stop3$V1
rental_total$StopMinute <- tag.stop3$V2
rental_total <- rental_total[, - which(colnames(rental_total) == 'StopTime')]
# convert training$UserType from factor into numeric
rental_total$UserType <- as.factor(rental_total$UserType)
as.numeric.factor <- function(x) {seq_along(levels(x))[x]}
rental_total$UserType <- as.numeric.factor(rental_total$UserType)
# Split into training and testing set
rental_total$StartDay <- as.numeric(levels(rental_total$StartDay))[rental_total$StartDay]
rental_total$StartMonth <- as.numeric(levels(rental_total$StartMonth))[rental_total$StartMonth]
rental_total$StartYear <- as.numeric(levels(rental_total$StartYear))[rental_total$StartYear]
rental_total$StartHour <- as.numeric(levels(rental_total$StartHour))[rental_total$StartHour]
rental_total$StartMinute <- as.numeric(levels(rental_total$StartMinute))[rental_total$StartMinute]
rental_total$StopDay <- as.numeric(levels(rental_total$StopDay))[rental_total$StopDay]
rental_total$StopMonth <- as.numeric(levels(rental_total$StopMonth))[rental_total$StopMonth]
rental_total$StopYear <- as.numeric(levels(rental_total$StopYear))[rental_total$StopYear]
rental_total$StopHour <- as.numeric(levels(rental_total$StopHour))[rental_total$StopHour]
rental_total$StopMinute <- as.numeric(levels(rental_total$StopMinute))[rental_total$StopMinute]
d.hour <- density(rental_total$StartHour)
plot(d.hour, main="Pitt Bike Trips by Hour of Day")
polygon(d.hour, col="blue", border="red")
##' according to the "Pitt Bike Trips by Hour of Day" plot, the fastigium of Pitt bike trips is between 8 - 20.
# density plot based on StartDay
d.day <- density(rental_total$StartDay)
plot(d.day, main="Pitt Bike Trips by Day of a Month")
polygon(d.day, col="blue", border="red")
##' According to the "Pitt Bike Trips by Day of a Month" plot, we will not take acount of "Day" element, instead,
##' we will calculate weekdays and weekends from Month and Day, and take weekdays and weekends as variables.
# density plot based on StartMonth
d.month <- density(rental_total$StartMonth)
plot(d.month, main="Pitt Bike Trips by Month")
polygon(d.month, col="blue", border="red")
##' according to the "Pitt Bike Trips by Month" plot, July and August have the most bike trips,
##'  and the bike trip amount declines month by month till Decemenber.
# density plot based on UserType
d.type <- density(rental_total$UserType)
plot(d.type, main="Pitt Bike Trips by UserType")
polygon(d.type, col="blue", border="red")
##' usertype 1 is the most, 3 second, 2 the least.
##' 1 - Member (pay as-you-go customer)
##' 2 - Subscriber ( deluxe and standard monthly member customer)
##' 3 - Daily (24-hour pass customer)
##' In our final table, the variables will be StationID, UserType, Month, Weekday,
##'  RackQnty, and the "y" will be the bike trip count of a specific station at a day, values with
##'  "-" means out, "+" means in. So we can compute the final bike amount of a station at one day.
##'  So we can dicide the rebalancing problem based on the amount and the "density plot based on Hour".
stn_data = read.csv("/Users/zhugejunwei/PittBikeShare/HealthyRideTripData2015Q4/HealthyRideStations2015.csv")
library(base)
week.Q3 <- HealthyRideRentals.2015.Q3[,c(1,2,3)]
week.Q4 <- HealthyRideRentals.2015.Q4[,c(1,2,3)]
week.merge <- rbind(week.Q3,week.Q4)
# StartWeekday
tag.week.start <- as.data.frame(str_split_fixed(week.merge$StartTime, " ", 2))
week.merge$Startdate <- gsub("/", "-", tag.week.start$V1)
tag.week.start2 <- as.data.frame(str_split_fixed(week.merge$Startdate, "-", 3))
library(stringr)
tag.week.start2$V1 <- str_pad(tag.week.start2$V1, 2, pad = "0")
week.merge$Startmonth <- tag.week.start2$V1
tag.week.start2$V2 <- str_pad(tag.week.start2$V1, 2, pad = "0")
week.merge$Startday <- tag.week.start2$V2
week.merge$Startyear <- tag.week.start2$V3
week.merge$Startdate <- paste(week.merge$Startmonth, "-", week.merge$Startday, "-", week.merge$Startyear)
week.merge$Startdate <- gsub(" ", "", week.merge$Startdate)
week.merge$Weekday <- weekdays(as.Date(week.merge$Startdate))
# StopWeekday
tag.week.Stop <- as.data.frame(str_split_fixed(week.merge$StopTime, " ", 2))
week.merge$Stopdate <- gsub("/", "-", tag.week.Stop$V1)
tag.week.Stop2 <- as.data.frame(str_split_fixed(week.merge$Stopdate, "-", 3))
library(stringr)
tag.week.Stop2$V1 <- str_pad(tag.week.Stop2$V1, 2, pad = "0")
week.merge$Stopmonth <- tag.week.Stop2$V1
tag.week.Stop2$V2 <- str_pad(tag.week.Stop2$V1, 2, pad = "0")
week.merge$Stopday <- tag.week.Stop2$V2
week.merge$Stopdate <- paste(week.merge$Stopmonth, "-", week.merge$Stopday, "-", week.merge$Startyear)
week.merge$Stopdate <- gsub(" ", "", week.merge$Stopdate)
week.merge$Weekday2 <- weekdays(as.Date(week.merge$Stopdate))
View(week.merge)
week.merge2 <- week.merge[, c(1,8,12)]
View(week.merge2)
rental_total <- merge(rental_total, week.merge2, by.x = "TripId", by.y = "TripId")
rental_total_stop <- rental_total[, c(5,6,12,13,15,18)]
head(rental_total_stop)
head(rental_total_stop)
#' Merge above with Station Data - Left outer join on "ToStationID"
rentalstop_final <- merge(rental_total_stop, stn_data, by.x = "ToStationId", by.y = "StationNum", all.x = TRUE)
head(rentalstop_final)
rentalstop_final <- rentalstop_final[, c(1,2,3,4,5,6,8)]
head(rentalstop_final)
#' Create data frame with group and "Count" variable
rentalstop_counts <- data.frame(table(rentalstop_final$ToStationId,rentalstop_final$UserType, rentalstop_final$StopMonth,rentalstop_final$StopDay,rentalstop_final$StopHour, rentalstop_final$Weekday2 ,rentalstop_final$RackQnty))
head(rentalstop_counts)
colnames(rentalstop_counts) <- c("ToStationId","StopUserType","StopMonth","StopDay","StopHour","StopWeekday","StopRackQnty","StopCount")
head(rentalstop_counts)
#' Maximum vehicles returned on a given month, day and hour at a particular station
rentalstop_counts[which.max(rentalstop_counts$StopCount),]
#' Extract Rental Start Data
rental_total_start <- rental_total[, c(1,2,3,4,6,7,8,10,17)]
#' Merge above with Station Data - Left outer join on "FromStationID"
rentalstart_final <- merge(rental_total_start, stn_data, by.x = "FromStationId", by.y = "StationNum", all.x = TRUE)
#' Create data frame with group and "Count" variable
rentalstart_counts <- data.frame(table(rentalstart_final$FromStationId,rentalstart_final$UserType, rentalstart_final$StartMonth,rentalstart_final$StartDay,rentalstart_final$StartHour,rentalstart_final$Weekday,rentalstart_final$RackQnty ))
head(rentalstart_counts)
colnames(rentalstart_counts) <- c("FromStationId","StartUserType","StartMonth","StartDay","StartHour","StartWeekday","StartRackQnty","StartCount")
head(rentalstart_counts)
#' Maximum vehicles returned on a given month, day and hour at a particular station
rentalstart_counts[which.max(rentalstart_counts$StartCount),]
#' merge two count data set into one
start_row_to_keep = which(rentalstart_counts$StartCount > 0)
rentalstart_counts <- rentalstart_counts[start_row_to_keep,]
head(rentalstart_counts)
stop_row_to_keep = which(rentalstop_counts$StopCount > 0)
rentalstop_counts <- rentalstop_counts[stop_row_to_keep,]
head(rentalstop_counts)
final_total <- merge(rentalstart_counts,rentalstop_counts, by.x = "FromStationId", by.y = "ToStationId")
str(final_total)
final_total$StartMonth <- as.numeric(final_total$StartMonth)
final_total$StopMonth <- as.numeric(final_total$StopMonth)
## Hour_row_to_keep <- which(final_total$StartHour == final_total$StopHour)
Month_row_to_keep <- which(final_total$StartMonth == final_total$StopMonth)
final_total.2 <- final_total[Month_row_to_keep,]
Day_row_to_keep <- which(final_total.2$StartDay == final_total.2$StopDay)
final_total.2 <- final_total.2[Day_row_to_keep,]
## final_total.2 <- final_total[Hour_row_to_keep,]
head(final_total.2)
final_total.2 <- final_total.2[,c(1,2,3,4,5,6,7,8,9,12,13,15)]
head(final_total.2)
final_total.2$Count <- final_total.2$StopCount - final_total.2$StartCount
head(final_total.2)
final_total.2 <- final_total.2[,-c(5,8,10,11,12)]
final_total.2$StartDay <- as.numeric(final_total.2$StartDay)
final_total.2$FromStationId <- as.numeric(final_total.2$FromStationId)
final_total.2$StartUserType <- as.numeric(final_total.2$StartUserType)
final_total.2$StartWeekday.n <- as.numeric(final_total.2$StartWeekday)
final_total.2$StopUserType <- as.numeric(final_total.2$StopUserType)
final_total.2$StartWeekday = NULL
final_total.2$StopUserType = NULL
y = final_total.2$Count
final_total.2 = cbind(y=y, final_total.2)
final_total.2$Count = NULL
str(final_total.2)
library(plyr)
names(final_total.2)[names(final_total.2)=="FromStationId"] <- "StationId"
names(final_total.2)[names(final_total.2)=="StartUserType"] <- "UserType"
names(final_total.2)[names(final_total.2)=="StartMonth"] <- "Month"
names(final_total.2)[names(final_total.2)=="StartRackQnty"] <- "RackQnty"
names(final_total.2)[names(final_total.2)=="StartWeekday.n"] <- "Weekdays"
head(final_total.2)
training <- final_total.2[which(final_total.2$StartDay < 20),]
testing <- final_total.2[-which(final_total.2$StartDay < 20),]
training$StartDay <- NULL
testing$StartDay <- NULL
training.scale <- training
testing.scale <- testing
for (i in 1:6)
training.scale[,i] = (training[,i]-min(training[,i]))/(max(training[,i])-min(training[,i]))
training.scale[1:3,]
for (i in 1:6)
testing.scale[,i] = (testing[,i]-min(testing[,i]))/(max(testing[,i])-min(testing[,i]))
testing.scale[1:3,]
str(training)
str()
str(final_total.2)
final_total.2$StopUserType <- as.numeric(paste(final_total.2$StopUserType)) ##
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
as.numeric.factor(final_total.2$RackQnty)
final_total.2$RackQnty <- as.numeric.factor(final_total.2$RackQnty)
str(final_total.2)
training <- final_total.2[which(final_total.2$StartDay < 20),]
testing <- final_total.2[-which(final_total.2$StartDay < 20),]
training$StartDay <- NULL
testing$StartDay <- NULL
training.scale <- training
testing.scale <- testing
for (i in 1:6)
training.scale[,i] = (training[,i]-min(training[,i]))/(max(training[,i])-min(training[,i]))
training.scale[1:3,]
for (i in 1:6)
testing.scale[,i] = (testing[,i]-min(testing[,i]))/(max(testing[,i])-min(testing[,i]))
testing.scale[1:3,]
